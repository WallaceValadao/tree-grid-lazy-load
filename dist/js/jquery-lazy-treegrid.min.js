!function (e) { e.fn.lazytreegrid = function (l) { return t[l] ? t[l].apply(this, Array.prototype.slice.call(arguments, 1)) : "object" != typeof l && l ? void e.error("Method with name " + l + " does not exists for jQuery.treegrid") : function (t) { var l = e(this), s = e.extend({}, e.fn.lazytreegrid.defaults, t); e.fn.lazytreegrid.settings = s, s.useTableLess ? s.table = { body: ".table-tree-body", tr: ".table-tree-tr" } : s.table = { body: "tbody", tr: "tr" }; var o, d = l.find(s.table.body), c = d.find(s.table.tr); if (c.remove(), 0 === c.length) return; for (var u = 0; u < c.length; u++) { if (!(o = c[u]).getAttribute("id-parent")) { c.splice(u, 1); break } o = null } o || e.error("Tr init not found"); d.append(o), function t(r, l, s, o, d, c) { var u = s.getAttribute("id-tree"); var f = e(s); let g = d * r.multiEspaceNivel + "px;"; f = n(r, f, d, c); var v = i(f, d); d++; var p = !1; for (var b = 0; b < o.length; b++)if (o[b].getAttribute("id-parent") === u) { var y = o.slice(0).splice(b, 1); l.append(o[b]), t(r, l, o[b], y, d, b), p = !0 } p ? (v.innerHTML = function (e, t) { return '<div style="margin-left:'.concat(t, '";><span class="fa ', e.iconClose, '" style="cursor: pointer; margin-right: ', e.marginExpand, ';"></span>') }(r, g).concat(v.innerHTML), v.classList.add("load-tree")) : v.innerHTML = a(r, g).concat(v.innerHTML) }(s, d, o, c, 0, 0), l.find(".tree-click").click(r), e.fn.lazytreegrid.this = l }.apply(this, arguments) }, e.fn.lazytreegrid.defaults = { source: null, moveHandle: !1, onExpand: function () { return !0 }, onCollapse: function () { return !0 }, onAdd: function () { }, toExpand: function () { }, toCollapse: function () { }, iconOpen: "fa-caret-right", iconClose: "fa-caret-down", invisibleLine: "d-none", defaulIconIsNull: !1, onActionExpand: null, maxNivelTree: 3, multiEspaceNivel: 10, arrayNivelBackgroundColor: null, arrayNivelBackgroundColor2: null, arrayNivelTextColor: null, marginExpand: "0.6rem", startExpanded: !0, useTableLess: !0 }; var t = { add: function (t, l) { let s = e.fn.lazytreegrid.settings; for (var o, d = this._getTrs(), c = 0; c < d.length; c++)if (d[c].getAttribute("id-tree") === t) { o = d[c]; break } let u = e(o); var f = u.find(".tree-click")[0].getAttribute("level"); let g = ++f * s.multiEspaceNivel + "px;"; var v = "", p = function () { }; for (f < s.maxNivelTree ? v = a(s, g) : (v = '<div style="margin-left:'.concat(g, '";>'), p = function (e) { e.find("td").removeClass("tree-click") }), c = 0; c < l.length; c++) { var b = e(l[c]), y = i(b = n(s, b, f, c), f); y.innerHTML = v.concat(y.innerHTML, "</div>"), p(b), u.after(b) } u.parent().find(".tree-click").unbind("click").click(r), s.onAdd() }, getAllParent: function (e) { var t = this._getTrs(), r = this._getIds(e, t); return r.push(e), r }, _getIds: function (e, t) { for (var r = 0; r < t.length; r++)if (t[r].getAttribute("id-tree") === e) { var n = t[r].getAttribute("id-parent"); if (!n || "0" === n) return [n]; var i = this._getIds(n, t); return i.push(n), i } }, _getTrs: function () { return e.fn.lazytreegrid.this.find(e.fn.lazytreegrid.settings.table.body).find(e.fn.lazytreegrid.settings.table.tr) } }; function r() { var r = e.fn.lazytreegrid.settings; if (!r.onExpand()) return; let n = e(this), i = n.parent(); var a = n.find("svg"); let l = i[0].getAttribute("id-tree"); var s = a.hasClass(r.iconOpen); if (n.hasClass("load-tree")) { if (!n.hasClass("any-tree")) { var o, d = i.parent().find(r.table.tr); s ? (a.removeClass(r.iconOpen).addClass(r.iconClose), o = function (e, t, n) { if (e.classList.remove(r.invisibleLine), e.classList.contains("item-tree-open")) { var i = t[n].getAttribute("id-tree"); e.classList.remove("item-tree-open"); var a = e.querySelector("svg"); if (a && !a.classList.contains(r.iconClose)) return; for (n++; n < t.length; n++)t[n].getAttribute("id-parent") === i && o(t[n], t, n) } }) : (a.addClass(r.iconOpen).removeClass(r.iconClose), o = function (e, t, n) { e.classList.add(r.invisibleLine); var i = e.getAttribute("id-tree"); for (n++; n < t.length; n++)t[n].getAttribute("id-parent") === i && (e.classList.add("item-tree-open"), o(t[n], t, n)) }); for (var c = !0, u = 0; u < d.length; u++)d[u].getAttribute("id-parent") === l && (o(d[u], d, u), c = !1); c && n.addClass("any-tree") } } else s ? (a.removeClass(r.iconOpen).addClass(r.iconClose), n.addClass("load-tree"), r.onActionExpand(l, t)) : n.addClass("any-tree") } function n(e, t, r, n) { return n % 2 == 1 ? t.css("background", e.arrayNivelBackgroundColor[r]) : t.css("background", e.arrayNivelBackgroundColor2[r]), null !== e.arrayNivelTextColor && t.css("color", e.arrayNivelTextColor[r]), t } function i(e, t) { var r = e.find(".tree-click")[0]; return r.setAttribute("level", t), r } function a(e, t) { return '<div style="margin-left:'.concat(t, '";><span class="fa ', e.iconOpen, '" style="cursor: pointer; margin-right: ', e.marginExpand, ';"></span>') } }(jQuery);